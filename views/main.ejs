<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>클릭 한 번으로 여행</title>
    <meta name="author" content="동네코딩" />
    <meta name="description" content="맛집지도 서비스" />
    <meta
      name="keywords"
      content="동네코딩, 맛집지도, 유튜버맛집, 맛집유튜버"
    />
    <link rel="stylesheet" href="/css/@font-face {.css" />
  </head>
  <body>
    <nav>
      <div class="inner">
        <div class="nav-container">
          <h1 class="nav-title">
            <form method="post" action="/home" class="nav-item">
              <input type = "submit" value = "One-Click Trip" class="nav-item" name = "" style="background-color:orange"/>
            </form>
          </h1>
          
          <a href="/process/logout" method="post" class="nav-item" >로그아웃</a>
          <form method="post" action="/userInfo" class="nav-item">
            <input type = "submit" value = "사용자 : <%= user.id %>" class="nav-item" name = ""/>
          </form>
        </div>
      </div>
    </nav>
    <main>    
        <section id="category">
            <div class="inner">
             <div class="category-container">
                 <h2 class="category-title">맛집지도 카테고리를 선택해보세요</h2>
                 <div class="category-list">
                 <button class="category-item" id="korea">한식</button>
                 <button class="category-item" id="china">중식</button>
                 <button class="category-item" id="japan">일식</button>
                 <button class="category-item" id="america">양식</button>
                 <button class="category-item" id="wheat">분식</button>
                 <button class="category-item" id="dessert">디저트</button>
                 <button class="category-item" id="sushi">회/초밥</button>
                 <button class="category-item" id="TouristAttraction">관광지</button>
                 </div>
             </div>
            </div>
            <div class="map_wrap">
              <div id="map" style="width:100%;height:100%;position:relative;overflow:hidden;"></div>
          
              <div id="menu_wrap" class="bg_white">
                  <div class="option">
                      <div>
                          <form onsubmit="searchPlaces(); return false;">
                              여행지 : <input type="text" value="서울" id="keyword" size="15"> 
                              <button type="submit">검색하기</button> 
                          </form>
                      </div>
                  </div>
                  <hr>
                  <ul id="placesList"></ul>
                  <div id="pagination"></div>
              </div>
            </div>
        </section>
        <div id="map" class="inner"></div>
    </main>
    
    <script 
      type="text/javascript" 
      src="//dapi.kakao.com/v2/maps/sdk.js?appkey=0b1ef046dc6cb021eb05a723896aa434&libraries=services">
      
    </script>
    <script>
    var markers = [];
    var mapContainer = document.getElementById('map'); //지도를 담을 영역의 DOM 레퍼런스
        mapOption = { //지도를 생성할 때 필요한 기본 옵션
          center: new kakao.maps.LatLng(35.1379222, 129.05562775), //지도의 중심좌표.
          level: 8 //지도의 레벨(확대, 축소 정도)
        };
  var map = new kakao.maps.Map(mapContainer, mapOption); //지도 생성 및 객체 리턴
  // 지도에 확대 축소 컨트롤을 생성
  let zoomControl = new kakao.maps.ZoomControl();
  // 지도의 우측에 확대 축소 컨트롤을 추가
  map.addControl(zoomControl, kakao.maps.ControlPosition.RIGHT);
  
  // 지도를 생성합니다    
  //var map = new kakao.maps.Map(mapContainer, mapOption); 
  // 장소 검색 객체를 생성합니다
  var ps = new kakao.maps.services.Places();  
  
  // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
  var infowindow = new kakao.maps.InfoWindow({zIndex:1});
  
  // 키워드로 장소를 검색합니다
  searchPlaces();
  
  // 키워드 검색을 요청하는 함수입니다
  function searchPlaces() {
  
  var keyword = document.getElementById('keyword').value;
  
  if (!keyword.replace(/^\s+|\s+$/g, '')) {
      alert('키워드를 입력해주세요!');
      return false;
  }
  
  // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다
  ps.keywordSearch( keyword, placesSearchCB); 
  }
  
  // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
  function placesSearchCB(data, status, pagination) {
  if (status === kakao.maps.services.Status.OK) {
  
      // 정상적으로 검색이 완료됐으면
      // 검색 목록과 마커를 표출합니다
      displayPlaces(data);
  
      // 페이지 번호를 표출합니다
      displayPagination(pagination);
  
  } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
  
      alert('검색 결과가 존재하지 않습니다.');
      return;
  
  } else if (status === kakao.maps.services.Status.ERROR) {
  
      alert('검색 결과 중 오류가 발생했습니다.');
      return;
  
  }
  }
  
  function displayPlaces(places) {
  
  var listEl = document.getElementById('placesList'), 
  menuEl = document.getElementById('menu_wrap'),
  fragment = document.createDocumentFragment(), 
  bounds = new kakao.maps.LatLngBounds(), 
  listStr = '';
  
  // 검색 결과 목록에 추가된 항목들을 제거합니다
  removeAllChildNods(listEl);
  
  // 지도에 표시되고 있는 마커를 제거합니다
  removeMarker();
  
  for ( var i=0; i<places.length; i++ ) {
  //서울좌표 :37.566826, 126.9786567
  // 마커를 생성하고 지도에 표시합니다
  var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),
      marker = addMarker(placePosition, i), //addmarker함수에서 마커 표시해줌
      itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다
  
  // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해
  // LatLngBounds 객체에 좌표를 추가합니다
  bounds.extend(placePosition);
  
  // 마커와 검색결과 항목에 mouseover 했을때
  // 해당 장소에 인포윈도우에 장소명을 표시합니다
  // mouseout 했을 때는 인포윈도우를 닫습니다
  (function(marker, title) {
      kakao.maps.event.addListener(marker, 'mouseover', function() {
          displayInfowindow(marker, title);
      });
  
      kakao.maps.event.addListener(marker, 'mouseout', function() {
          infowindow.close();
      });
  
      itemEl.onmouseover =  function () {
          displayInfowindow(marker, title);
      };
  
      itemEl.onmouseout =  function () {
          infowindow.close();
      };
  })(marker, places[i].place_name);
  
  fragment.appendChild(itemEl); //목록 나오는부분
  }
  
  // 검색결과 항목들을 검색결과 목록 Element에 추가합니다
  listEl.appendChild(fragment);
  menuEl.scrollTop = 0;
  
  // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
  map.setBounds(bounds);
  }
  
  // 검색결과 항목을 Element로 반환하는 함수입니다
  function getListItem(index, places) {
  
  var el = document.createElement('li'),
  itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +
          '<div class="info">' +
          '   <h5>' + places.place_name + '</h5>';
  
  if (places.road_address_name) {
  itemStr += '    <span>' + places.road_address_name + '</span>' +
              '   <span class="jibun gray">' +  places.address_name  + '</span>';
  } else {
  itemStr += '    <span>' +  places.address_name  + '</span>'; 
  }
           
  itemStr += '  <span class="tel">' + places.phone  + '</span>' +
          '</div>';           
  
  el.innerHTML = itemStr;
  el.className = 'item';
  
  return el;
  }
  
  // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
  function addMarker(position, idx, title) {
  var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다
  imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기
  imgOptions =  {
      spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기
      spriteOrigin : new kakao.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
      offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표
  },
  markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),
      marker = new kakao.maps.Marker({
      position: position, // 마커의 위치
      image: markerImage 
  });
  
  //marker.setMap(map); // 지도 위에 마커를 표출합니다 //이 부분 주석하면 마크 안보임
  markers.push(marker);  // 배열에 생성된 마커를 추가합니다
  
  return marker;
  }
  
  // 지도 위에 표시되고 있는 마커를 모두 제거합니다
  function removeMarker() {
  for ( var i = 0; i < markers.length; i++ ) {
  markers[i].setMap(null);
  }   
  markers = [];
  }
  
  // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다
  function displayPagination(pagination) {
  var paginationEl = document.getElementById('pagination'),
  fragment = document.createDocumentFragment(),
  i; 
  
  // 기존에 추가된 페이지번호를 삭제합니다
  while (paginationEl.hasChildNodes()) {
  paginationEl.removeChild (paginationEl.lastChild);
  }
  
  for (i=1; i<=pagination.last; i++) {
  var el = document.createElement('a');
  el.href = "#";
  el.innerHTML = i;
  
  if (i===pagination.current) {
      el.className = 'on';
  } else {
      el.onclick = (function(i) {
          return function() {
              pagination.gotoPage(i);
          }
      })(i);
  }
  
  fragment.appendChild(el);
  }
  paginationEl.appendChild(fragment);
  }
  
  // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다
  // 인포윈도우에 장소명을 표시합니다
  function displayInfowindow(marker, title) {
  var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';
  
  infowindow.setContent(content);
  infowindow.open(map, marker);
  }
  
  // 검색결과 목록의 자식 Element를 제거하는 함수입니다
  function removeAllChildNods(el) {   
  while (el.hasChildNodes()) {
    el.removeChild (el.lastChild);
  }
  }
  
  /*
  **********************************************************
  2. 더미데이터 준비하기 (제목, 주소, url, 카테고리)
  */
  const dataSet = [
  {
    title: "옛날오막집",
    address: "부산 서구 구덕로 274번길 14",
    url: "https://www.youtube.com/watch?v=P-jNCiLMQN4",
    category: "한식",
  },
  {
    title: "이레옥",
    address: "부산 해운대구 마린시티3로 51",
    url: "https://www.youtube.com/watch?v=8VPVbZdWx5M",
    category: "한식",
  },
  {
    title: "호랑이젤라떡",
    address: "부산광역시 해운대구 달맞이길62번길 38",
    url: "https://www.youtube.com/watch?v=lwUfDmTO1fw",
    category: "디저트",
  },
  {
    title: "감천문화마을",
    address: "부산 사하구 감천동 10-63",
    url: "https://www.youtube.com/watch?v=F7gOKQxkDyM",
    category: "관광지",
  },
  ];
  
  var geocoder = new kakao.maps.services.Geocoder();
  
  function getCoordsByAddress(address) {
  // promise 형태로 반환
  return new Promise((resolve, reject) => {
  // 주소로 좌표를 검색합니다
  geocoder.addressSearch(address, function (result, status) {
    // 정상적으로 검색이 완료됐으면
    if (status === kakao.maps.services.Status.OK) {
      var coords = new kakao.maps.LatLng(result[0].y, result[0].x);
      return resolve(coords);
    }
    reject(new Error("getCoordsByAddress Error: not valid Address"));
  });
  });
  }
  setMap(dataSet);
  
  
  function getContent(data){
  // 유튜브 섬네일 id 가져오기
  let replaceUrl = data.url;
  let finUrl = "";
  replaceUrl = replaceUrl.replace("https://youtu.be/", "");
  replaceUrl = replaceUrl.replace("https://www.youtube.com/embed/", "");
  replaceUrl = replaceUrl.replace("https://www.youtube.com/watch?v=", "");
  finUrl = replaceUrl.split("&")[0];
  
  // 인포윈도우 가공하기
  return `
  <div class="infowindow">
    <div class="infowindow-img-container">
      <img
        src="https://img.youtube.com/vi/${finUrl}/mqdefault.jpg"
        class="infowindow-img"
      />
    </div>
    <div class="infowindow-body">
      <h5 class="infowindow-title">${data.title}</h5>
      <p class="infowindow-address">${data.address}</p>
      <a href="${data.url}" class="infowindow-btn" target="_blank">영상이동</a>
    </div>
  </div>
  `;
  }
  
  async function setMap(dataSet) {
  for (var i = 0; i < dataSet.length; i++) {
  let coords = await getCoordsByAddress(dataSet[i].address);
  
  // 마커를 생성합니다
  var marker = new kakao.maps.Marker({
    map: map, // 마커를 표시할 지도
    position: coords, // 마커를 표시할 위치
  });
  
  markerArray.push(marker);
  
  // 마커에 표시할 인포윈도우를 생성합니다
  var infowindow = new kakao.maps.InfoWindow({
    content: getContent(dataSet[i]), // 인포윈도우에 표시할 내용
  });
  
  infowindowArray.push(infowindow);
  
  // 마커에 mouseover 이벤트와 mouseout 이벤트를 등록합니다
  // 이벤트 리스너로는 클로저를 만들어 등록합니다
  // for문에서 클로저를 만들어 주지 않으면 마지막 마커에만 이벤트가 등록됩니다
  kakao.maps.event.addListener(
    marker,
    "click",
    makeOverListener(map, marker, infowindow, coords)
  );
  // 커스텀: 맵을 클릭하면 현재 나타난 인포윈도우가 없어지게끔
  kakao.maps.event.addListener(map, "click", makeOutListener(infowindow));
  }
  }
  // 인포윈도우를 표시하는 클로저를 만드는 함수입니다
  /* 
  커스텀
  1. 클릭시 다른 인포윈도우 닫기
  2. 클릭한 곳으로 지도 중심 이동하기
  */
  
  function makeOverListener(map, marker, infowindow,coords) {
  return function () {
    // 1. 클릭시 다른 인포윈도우 닫기
    closeInfoWindow();
    infowindow.open(map, marker);
    // 2. 클릭한 곳으로 지도 중심 옮기기
    map.panTo(coords);
  };
  }
  
  let infowindowArray = [];
  function closeInfoWindow(){
  for(let infowindow of infowindowArray){
    infowindow.close();
  }
  }
  
  function makeOutListener(infowindow) {
  return function () {
    infowindow.close();
  };
  }
  
  /*
  **********************************************
  5. 카테고리 분류
  */
  const categoryMap = {
  korea: "한식",
  china: "중식",
  japan: "일식",
  america: "양식",
  wheat: "분식",
  dessert: "디저트",
  sushi: "회/초밥",
  TouristAttraction: "관광지",
  };
  
  const categoryList = document.querySelector(".category-list");
  categoryList.addEventListener("click",categoryHandler);
  
  function categoryHandler(event){
  const categoryId = event.target.id;
  const category = categoryMap[categoryId];
  
  let categorizedDataSet = [];
  for (let data of dataSet) {
  if (data.category === category) {
    categorizedDataSet.push(data);
  }
  }
  
  //기존 마커 삭제
  closeMarker();
  
  //기존 인포윈도우 닫기
  closeInfoWindow();
  
  setMap(categorizedDataSet);
  }
  
  let markerArray = [];
  function closeMarker(){
  for(marker of markerArray){
  marker.setMap(null);
    }
  }
    </script>


  </body>
</html>